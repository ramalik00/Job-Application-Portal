{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_RPROFILE, RPROFILE_ERROR, CLEAR_RPROFILE } from './types'; // get current recruiter profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/rprofile/me');\n    dispatch({\n      type: GET_RPROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RPROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // update recruiter profile\n\nexport const createProfile = (formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/rprofile', formData, config);\n    dispatch({\n      type: GET_RPROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Profile Created\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: RPROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // clear profile \n\nexport const clearRprofile = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_RPROFILE\n    });\n  } catch (err) {\n    dispatch({\n      type: RPROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/rahul/JobApplication/frontend/src/actions/rprofile.js"],"names":["axios","setAlert","GET_RPROFILE","RPROFILE_ERROR","CLEAR_RPROFILE","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","config","post","push","errors","forEach","error","clearRprofile"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,SACIC,YADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACrD,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,kBAAV,CAAlB;AACAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP,YADD;AAELQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,cADD;AAELO,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAbM,C,CAeP;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMb,QAAN,IAAkB;AAClE,QAAMc,MAAM,GAAG;AACX,eAAW;AACP,sBAAgB;AADT;AADA,GAAf;;AAKA,MAAI;AACA,UAAMb,GAAG,GAAG,MAAMP,KAAK,CAACqB,IAAN,CAAW,eAAX,EAA4BH,QAA5B,EAAsCE,MAAtC,CAAlB;AACAd,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP,YADD;AAELQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIAL,IAAAA,QAAQ,CAACL,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAAT,CAAR;AAEAkB,IAAAA,OAAO,CAACG,IAAR,CAAa,YAAb;AAEH,GAVD,CAUE,OAAOV,GAAP,EAAY;AACV,UAAMW,MAAM,GAAGX,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAInB,QAAQ,CAACL,QAAQ,CAACwB,KAAK,CAACZ,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,cADD;AAELO,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CA3BM,C,CA6BP;;AACA,OAAO,MAAMU,aAAa,GAAG,MAAM,MAAMpB,QAAN,IAAkB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACH,GAFD,CAEE,OAAOQ,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,cADD;AAELO,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CATM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n    GET_RPROFILE,\n    RPROFILE_ERROR,\n    CLEAR_RPROFILE\n} from './types';\n\n// get current recruiter profile\nexport const getCurrentProfile = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/rprofile/me');\n        dispatch({\n            type: GET_RPROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: RPROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// update recruiter profile\nexport const createProfile = (formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.post('/api/rprofile', formData, config);\n        dispatch({\n            type: GET_RPROFILE,\n            payload: res.data\n        });\n        dispatch(setAlert(\"Profile Created\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: RPROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// clear profile \nexport const clearRprofile = () => async dispatch => {\n    try {\n        dispatch({ type: CLEAR_RPROFILE });\n    } catch (err) {\n        dispatch({\n            type: RPROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}